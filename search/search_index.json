{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NTFY LITE","text":"<p>ntfy_lite is a minimalistic python API for sending ntfy notifications.</p> <p>It comes with a Handler for the logging package.</p> <p>Basic usage:</p> <pre><code>import ntfy_lite as ntfy\n\nntfy.push(\n  \"my topic\", priority=ntfy.Priority.DEFAULT, message=\"my message\"\n)\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>from source:</p> <pre><code>git clone https://github.com/MPI-IS/ntfy_lite.git\ncd ntfy_lite\npip install .\n</code></pre> <p>from pypi: <pre><code>pip install ntfy_lite\n</code></pre></p>"},{"location":"limitation/","title":"Limitation","text":"<p>No check regarding ntfy limitations is performed before notifications are sent.</p>"},{"location":"references/","title":"API","text":"<p>API references</p>"},{"location":"references/#ntfy_lite.actions","title":"<code>actions</code>","text":"<p>Module defining the Action class as well as it subclasses:</p> <ul> <li>ViewAction</li> <li>HttpAction</li> </ul>"},{"location":"references/#ntfy_lite.actions.Action","title":"<code>Action</code>","text":"<p>Superclass for action buttons.</p> <p>See: ntfy button action documentation</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>name of the action (e.g. 'view', 'http')</p> required <code>label</code> <code>str</code> <p>description of the action</p> required <code>url</code> <code>str</code> <p>where the action redirects</p> required <code>clear</code> <code>bool</code> <p>if true, the notification is deleted upon click</p> <code>False</code> Source code in <code>ntfy_lite/actions.py</code> <pre><code>class Action:\n    \"\"\"\n    Superclass for action buttons.\n\n    See: [ntfy button action documentation](https://ntfy.sh/docs/publish/#action-buttons)\n\n    Args:\n      action: name of the action (e.g. 'view', 'http')\n      label: description of the action\n      url: where the action redirects\n      clear: if true, the notification is deleted upon click\n    \"\"\"\n\n    def __init__(self, action: str, label: str, url: str, clear: bool = False):\n        validate_url(\"Action.url\", url)\n\n        self.action = action\n        self.label = label\n        self.url = url\n        if clear:\n            self.clear = \"true\"\n        else:\n            self.clear = \"false\"\n\n    def _str(self, attrs: typing.Tuple[str, ...]) -&gt; str:\n        values = {attr: getattr(self, attr) for attr in attrs}\n        return \", \".join(\n            [self.action]\n            + [f\"{attr}={value}\" for attr, value in values.items() if value is not None]\n        )\n</code></pre>"},{"location":"references/#ntfy_lite.actions.HttpAction","title":"<code>HttpAction</code>","text":"<p>             Bases: <code>Action</code></p> <p>Class encapsulating the information of a view action. See: ntfy http action</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>arbitrary string</p> required <code>url</code> <code>str</code> <p>url to which the request should be sent</p> required <code>clear</code> <code>bool</code> <p>if the ntfy notification should be cleared after the request succeeds</p> <code>False</code> <code>method</code> <code>HttpMethod</code> <p>GET, POST or PUT</p> <code>GET</code> <code>headers</code> <code>Optional[Mapping[str, str]]</code> <p>HTTP headers to be passed in the request</p> <code>None</code> <code>body</code> <code>Optional[str]</code> <p>HTTP body</p> <code>None</code> Source code in <code>ntfy_lite/actions.py</code> <pre><code>class HttpAction(Action):\n    \"\"\"\n    Class encapsulating the information of a view action.\n    See: [ntfy http action](https://ntfy.sh/docs/publish/#send-http-request)\n\n    Args:\n      label: arbitrary string\n      url: url to which the request should be sent\n      clear: if the ntfy notification should be cleared after the request succeeds\n      method: GET, POST or PUT\n      headers: HTTP headers to be passed in the request\n      body: HTTP body\n\n    \"\"\"\n\n    def __init__(\n        self,\n        label: str,\n        url: str,\n        clear: bool = False,\n        method: HttpMethod = HttpMethod.GET,\n        headers: typing.Optional[typing.Mapping[str, str]] = None,\n        body: typing.Optional[str] = None,\n    ):\n        super().__init__(\"http\", label, url, clear)\n        self.method = method.value\n        self.headers = headers\n        self.body = body\n\n    def __str__(self) -&gt; str:\n        _attrs = (\"label\", \"url\", \"clear\", \"method\", \"body\")\n        main = self._str(_attrs)\n        if not self.headers:\n            return main\n        headers_str = \", \".join(\n            [f\"headers.{key}={value}\" for key, value in self.headers.items()]\n        )\n        return main + \", \" + headers_str\n</code></pre>"},{"location":"references/#ntfy_lite.actions.HttpMethod","title":"<code>HttpMethod</code>","text":"<p>             Bases: <code>Enum</code></p> <p>List of methods supported by instances of HttpAction.</p> Source code in <code>ntfy_lite/actions.py</code> <pre><code>class HttpMethod(Enum):\n    \"\"\"\n    List of methods supported by instances\n    of HttpAction.\n    \"\"\"\n\n    GET = auto()\n    \"\"\" GET http method \"\"\"\n\n    POST = auto()\n    \"\"\" POST http method \"\"\"\n\n    PUT = auto()\n    \"\"\" PUT http method \"\"\"\n</code></pre>"},{"location":"references/#ntfy_lite.actions.HttpMethod.GET","title":"<code>GET = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>GET http method</p>"},{"location":"references/#ntfy_lite.actions.HttpMethod.POST","title":"<code>POST = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>POST http method</p>"},{"location":"references/#ntfy_lite.actions.HttpMethod.PUT","title":"<code>PUT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>PUT http method</p>"},{"location":"references/#ntfy_lite.actions.ViewAction","title":"<code>ViewAction</code>","text":"<p>             Bases: <code>Action</code></p> <p>Class encapsulating the information of a view action. See: ntfy view action For arguments: see documentation of the ntfy_lite.actions.Action superclass</p> Source code in <code>ntfy_lite/actions.py</code> <pre><code>class ViewAction(Action):\n    \"\"\"\n    Class encapsulating the information of a view action.\n    See: [ntfy view action](https://ntfy.sh/docs/publish/#open-websiteapp)\n    For arguments: see documentation of the [ntfy_lite.actions.Action][] superclass\n    \"\"\"\n\n    def __init__(self, label: str, url: str, clear: bool = False) -&gt; None:\n        super().__init__(\"view\", label, url, clear)\n\n    def __str__(self) -&gt; str:\n        _attrs = (\"label\", \"url\", \"clear\")\n        return self._str(_attrs)\n</code></pre>"},{"location":"references/#ntfy_lite.defaults","title":"<code>defaults</code>","text":"<p>Module defining level2tags, i.e. a mapping between logging level to emoticons. This mapping is used for the logging handler (ntfy_lite.handler.NtfyHandler)</p>"},{"location":"references/#ntfy_lite.defaults.level2tags","title":"<code>level2tags: typing.Dict[LoggingLevel, typing.Tuple[str, ...]] = {logging.CRITICAL: ('fire'), logging.ERROR: ('broken_heart'), logging.WARNING: ('warning'), logging.INFO: ('artificial_satellite'), logging.DEBUG: ('speech_balloon'), logging.NOTSET: tuple()}</code>  <code>module-attribute</code>","text":"<p>Default mapping from logging level to tags, i.e. tags that will be added to notifications corresponding to the key logging level.</p> <p>See ntfy_lite.handler.NtfyHandler</p>"},{"location":"references/#ntfy_lite.demo_logging","title":"<code>demo_logging</code>","text":"<p>ntfy lite: ntfy logging Handler example</p>"},{"location":"references/#ntfy_lite.demo_push","title":"<code>demo_push</code>","text":"<p>ntfy lite: notification push examples</p>"},{"location":"references/#ntfy_lite.error","title":"<code>error</code>","text":""},{"location":"references/#ntfy_lite.error.NtfyError","title":"<code>NtfyError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Error thrown when the push of a notification fails.</p> <p>Attributes   status_code: error code returned by the request   reason: reason of the failure</p> Source code in <code>ntfy_lite/error.py</code> <pre><code>class NtfyError(Exception):\n    \"\"\"\n    Error thrown when the push of a notification fails.\n\n    Attributes\n      status_code: error code returned by the request\n      reason: reason of the failure\n    \"\"\"\n\n    def __init__(self, status_code: int, reason: str):\n        self.status_code = status_code\n        self.reason = reason\n\n    def __str__(self):\n        return f\"{self.status_code} ({self.reason})\"\n</code></pre>"},{"location":"references/#ntfy_lite.handler","title":"<code>handler</code>","text":"<p>Module defining the NtfyHandler class.</p> <p>The NtfyHandler is a logging handler, i.e. an handler suitable for the python logging package</p> <pre><code># Basic usage\n\nimport logging\nimport ntfy_lite as ntfy\n\nntfy_handler = ntfy.NtfyHandler(\"my_topic\")\n\nlogging.basicConfig(\n        level=logging.INFO,\n        format=\"[%(levelname)s] %(asctime)s | %(name)s |  %(message)s\",\n        datefmt=\"%d-%b-%y %H:%M:%S\",\n        handlers=(ntfy_handler,),\n)\n</code></pre>"},{"location":"references/#ntfy_lite.handler.NtfyHandler","title":"<code>NtfyHandler</code>","text":"<p>             Bases: <code>Handler</code></p> <p>Subclass of logging.Handler that pushes ntfy notifications.</p> <p>The notification title will be the record name, and the notification message will be either the record message or a file attachment (depending on the level2filepath argument).</p> Source code in <code>ntfy_lite/handler.py</code> <pre><code>class NtfyHandler(logging.Handler):\n    \"\"\"Subclass of [logging.Handler](https://docs.python.org/3/library/logging.html#handler-objects)\n    that pushes ntfy notifications.\n\n    The notification title will be the record name, and the\n    notification message will be either the record message or a\n    file attachment (depending on the level2filepath argument).\n    \"\"\"\n\n    def __init__(\n        self,\n        topic: str,\n        url: str = \"https://ntfy.sh\",\n        twice_in_a_row: bool = True,\n        error_callback: typing.Optional[\n            typing.Callable[[Exception], typing.Any]\n        ] = None,\n        level2tags: typing.Dict[LoggingLevel, typing.Tuple[str, ...]] = level2tags,\n        level2priority: typing.Dict[LoggingLevel, Priority] = level2priority,\n        level2filepath: typing.Dict[LoggingLevel, Path] = {},\n        level2email: typing.Dict[LoggingLevel, str] = {},\n        dry_run: DryRun = DryRun.off,\n    ):\n        \"\"\"\n        Args:\n          topic: Topic on which the notifications will be pushed.\n          url: https://ntfy.sh by default.\n          twice_in_a_row: If False, if several similar records (similar: same name\n            and same message) are emitted, only the first one will result in notification\n            being pushed (to avoid the channel to reach the accepted limits of notifications).\n          error_callback: It will be called if a NtfyError is raised when pushing a notification.\n          level2tags: mapping between logging level and tags to be associated with the notification\n          level2priority: mapping between the logging level and the notification priority.\n          level2filepath: If for the logging level of the record a corresponding filepath is set,\n            the notification will contain no message but a correspondinf file attachment\n            (be aware of the size limits, see https://ntfy.sh/docs/publish/#attach-local-file).\n          level2email: If an email address is specified for the logging level of the record,\n            the ntfy notification will also request a mail to be sent.\n          dry_run: For testing. If 'on', no notification will be sent. If 'error', no notification will be sent,\n            instead a NtfyError are raised.\n        \"\"\"\n        super().__init__()\n        self._url = url\n        self._topic = topic\n        self._last_messages: typing.Optional[typing.Dict[str, str]]\n        self._last_messages = None if twice_in_a_row else {}\n        self._level2tags = level2tags\n        self._level2priority = level2priority\n        self._level2filepath = level2filepath\n        self._level2email = level2email\n        self._error_callback = error_callback\n        self._dry_run = dry_run\n\n        for logging_level in level2priority:\n            if logging_level not in self._level2priority:\n                raise ValueError(\n                    f\"NtfyHandler, level2priority argument: missing mapping from \"\n                    f\"logging level {logging_level} to ntfy priority level\"\n                )\n\n    def _is_new_record(self, record: logging.LogRecord) -&gt; bool:\n        if self._last_messages is None:\n            return True\n        try:\n            previous_message = self._last_messages[record.name]\n        except KeyError:\n            self._last_messages[record.name] = record.msg\n            return True\n        if record.msg == previous_message:\n            return False\n        self._last_messages[record.name] = record.msg\n        return True\n\n    def emit(self, record: logging.LogRecord) -&gt; None:\n        \"\"\"\n        Push the record as an ntfy message.\n        \"\"\"\n        if self._last_messages and not self._is_new_record(record):\n            return\n        try:\n            filepath = self._level2filepath[record.levelno]\n            message = None\n        except KeyError:\n            filepath = None\n            message = record.msg\n        try:\n            email = self._level2email[record.levelno]\n        except KeyError:\n            email = None\n        try:\n            tags = self._level2tags[record.levelno]\n        except KeyError:\n            tags = tuple()\n        try:\n            push(\n                self._topic,\n                record.name,\n                message=message,\n                priority=self._level2priority[record.levelno],\n                tags=tags,\n                email=email,\n                filepath=filepath,\n                url=self._url,\n                dry_run=self._dry_run,\n            )\n        except Exception as e:\n            if self._error_callback is not None:\n                self._error_callback(e)\n            self.handleError(record)\n</code></pre>"},{"location":"references/#ntfy_lite.handler.NtfyHandler.__init__","title":"<code>__init__(topic, url='https://ntfy.sh', twice_in_a_row=True, error_callback=None, level2tags=level2tags, level2priority=level2priority, level2filepath={}, level2email={}, dry_run=DryRun.off)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>topic</code> <code>str</code> <p>Topic on which the notifications will be pushed.</p> required <code>url</code> <code>str</code> <p>https://ntfy.sh by default.</p> <code>'https://ntfy.sh'</code> <code>twice_in_a_row</code> <code>bool</code> <p>If False, if several similar records (similar: same name and same message) are emitted, only the first one will result in notification being pushed (to avoid the channel to reach the accepted limits of notifications).</p> <code>True</code> <code>error_callback</code> <code>Optional[Callable[[Exception], Any]]</code> <p>It will be called if a NtfyError is raised when pushing a notification.</p> <code>None</code> <code>level2tags</code> <code>Dict[LoggingLevel, Tuple[str, ...]]</code> <p>mapping between logging level and tags to be associated with the notification</p> <code>level2tags</code> <code>level2priority</code> <code>Dict[LoggingLevel, Priority]</code> <p>mapping between the logging level and the notification priority.</p> <code>level2priority</code> <code>level2filepath</code> <code>Dict[LoggingLevel, Path]</code> <p>If for the logging level of the record a corresponding filepath is set, the notification will contain no message but a correspondinf file attachment (be aware of the size limits, see https://ntfy.sh/docs/publish/#attach-local-file).</p> <code>{}</code> <code>level2email</code> <code>Dict[LoggingLevel, str]</code> <p>If an email address is specified for the logging level of the record, the ntfy notification will also request a mail to be sent.</p> <code>{}</code> <code>dry_run</code> <code>DryRun</code> <p>For testing. If 'on', no notification will be sent. If 'error', no notification will be sent, instead a NtfyError are raised.</p> <code>off</code> Source code in <code>ntfy_lite/handler.py</code> <pre><code>def __init__(\n    self,\n    topic: str,\n    url: str = \"https://ntfy.sh\",\n    twice_in_a_row: bool = True,\n    error_callback: typing.Optional[\n        typing.Callable[[Exception], typing.Any]\n    ] = None,\n    level2tags: typing.Dict[LoggingLevel, typing.Tuple[str, ...]] = level2tags,\n    level2priority: typing.Dict[LoggingLevel, Priority] = level2priority,\n    level2filepath: typing.Dict[LoggingLevel, Path] = {},\n    level2email: typing.Dict[LoggingLevel, str] = {},\n    dry_run: DryRun = DryRun.off,\n):\n    \"\"\"\n    Args:\n      topic: Topic on which the notifications will be pushed.\n      url: https://ntfy.sh by default.\n      twice_in_a_row: If False, if several similar records (similar: same name\n        and same message) are emitted, only the first one will result in notification\n        being pushed (to avoid the channel to reach the accepted limits of notifications).\n      error_callback: It will be called if a NtfyError is raised when pushing a notification.\n      level2tags: mapping between logging level and tags to be associated with the notification\n      level2priority: mapping between the logging level and the notification priority.\n      level2filepath: If for the logging level of the record a corresponding filepath is set,\n        the notification will contain no message but a correspondinf file attachment\n        (be aware of the size limits, see https://ntfy.sh/docs/publish/#attach-local-file).\n      level2email: If an email address is specified for the logging level of the record,\n        the ntfy notification will also request a mail to be sent.\n      dry_run: For testing. If 'on', no notification will be sent. If 'error', no notification will be sent,\n        instead a NtfyError are raised.\n    \"\"\"\n    super().__init__()\n    self._url = url\n    self._topic = topic\n    self._last_messages: typing.Optional[typing.Dict[str, str]]\n    self._last_messages = None if twice_in_a_row else {}\n    self._level2tags = level2tags\n    self._level2priority = level2priority\n    self._level2filepath = level2filepath\n    self._level2email = level2email\n    self._error_callback = error_callback\n    self._dry_run = dry_run\n\n    for logging_level in level2priority:\n        if logging_level not in self._level2priority:\n            raise ValueError(\n                f\"NtfyHandler, level2priority argument: missing mapping from \"\n                f\"logging level {logging_level} to ntfy priority level\"\n            )\n</code></pre>"},{"location":"references/#ntfy_lite.handler.NtfyHandler.emit","title":"<code>emit(record)</code>","text":"<p>Push the record as an ntfy message.</p> Source code in <code>ntfy_lite/handler.py</code> <pre><code>def emit(self, record: logging.LogRecord) -&gt; None:\n    \"\"\"\n    Push the record as an ntfy message.\n    \"\"\"\n    if self._last_messages and not self._is_new_record(record):\n        return\n    try:\n        filepath = self._level2filepath[record.levelno]\n        message = None\n    except KeyError:\n        filepath = None\n        message = record.msg\n    try:\n        email = self._level2email[record.levelno]\n    except KeyError:\n        email = None\n    try:\n        tags = self._level2tags[record.levelno]\n    except KeyError:\n        tags = tuple()\n    try:\n        push(\n            self._topic,\n            record.name,\n            message=message,\n            priority=self._level2priority[record.levelno],\n            tags=tags,\n            email=email,\n            filepath=filepath,\n            url=self._url,\n            dry_run=self._dry_run,\n        )\n    except Exception as e:\n        if self._error_callback is not None:\n            self._error_callback(e)\n        self.handleError(record)\n</code></pre>"},{"location":"references/#ntfy_lite.ntfy","title":"<code>ntfy</code>","text":"<p>Module defining the push method, which send a message or the content of a file to an NTFY channel.</p>"},{"location":"references/#ntfy_lite.ntfy.DryRun","title":"<code>DryRun</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An optional value of DryRun may be passed as an argument to the ntfy_lite.ntfy.push function.</p> <ul> <li> <p>If 'off' is passed (default), then the ntfy_lite.ntfy.push function will publish to ntfy.</p> </li> <li> <p>If 'on' is passed, then the ntfy_lite.ntfy.push function will not publish to ntfy.</p> </li> <li> <p>If 'error' is passed, then the ntfy_lite.ntfy.push function will raise an ntfy_lite.error.NtfyError.</p> </li> </ul> <p>This is meant for testing.</p> Source code in <code>ntfy_lite/ntfy.py</code> <pre><code>class DryRun(Enum):\n    \"\"\"\n    An optional value of DryRun may be passed as an argument to the [ntfy_lite.ntfy.push][] function.\n\n    - If 'off' is passed (default), then the [ntfy_lite.ntfy.push][] function will publish to ntfy.\n\n    - If 'on' is passed, then the [ntfy_lite.ntfy.push][] function will *not* publish to ntfy.\n\n    - If 'error' is passed, then the [ntfy_lite.ntfy.push][] function will raise an [ntfy_lite.error.NtfyError][].\n\n    This is meant for testing.\n    \"\"\"\n\n    on = auto()\n    off = auto()\n    error = auto()\n</code></pre>"},{"location":"references/#ntfy_lite.ntfy.push","title":"<code>push(topic, title, message=None, priority=Priority.DEFAULT, tags=[], click=None, email=None, filepath=None, attach=None, icon=None, actions=[], at=None, url='https://ntfy.sh', dry_run=DryRun.off)</code>","text":"<p>Pushes a notification.</p> <pre><code># basic usage\nimport ntfy_lite as ntfy\n\nntfy.push(\n    \"my topic\", priority=ntfy.Priority.DEFAULT, message=\"my message\"\n)\n</code></pre> <p>For more documentation of all arguments, visit: https://ntfy.sh/docs/publish/</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>str</code> <p>the ntfy topic on which to publish</p> required <code>title</code> <code>str</code> <p>the title of the notification</p> required <code>message</code> <code>Optional[str]</code> <p>the message. It is optional and if None, then a filepath argument must be provided instead.</p> <code>None</code> <code>priority</code> <code>Priority</code> <p>the priority of the notification</p> <code>DEFAULT</code> <code>tags</code> <code>emojis</code> <p>either a string (a single tag) or a list of string (several tags). see supported emojis</p> <code>[]</code> <code>click</code> <code>Optional[str]</code> <p>URL link to be included in the notification</p> <code>None</code> <code>email</code> <code>Optional[str]</code> <p>address to which the notification should also be sent</p> <code>None</code> <code>filepath</code> <code>Optional[Path]</code> <p>path to the file to be sent as attachement. It is optional and if None, then a message argument must be provided instead.</p> <code>None</code> <code>icon</code> <code>Optional[str]</code> <p>URL to an icon to include in the notification</p> <code>None</code> <code>actions</code> <code>Union[Action, Sequence[Action]]</code> <p>An action is either a ntfy_lite.actions.ViewAction (i.e. a link to a website) or a ntfy_lite.actions.HttpAction (i.e. sending of a HTTP GET, POST or PUT request to a website)</p> <code>[]</code> <code>at</code> <code>Optional[str]</code> <p>to be used for delayed notification, see scheduled delivery</p> <code>None</code> <code>url</code> <code>Optional[str]</code> <p>ntfy server</p> <code>'https://ntfy.sh'</code> <code>dry_run</code> <code>DryRun</code> <p>for testing purposes, see ntfy_lite.ntfy.DryRun</p> <code>off</code> Source code in <code>ntfy_lite/ntfy.py</code> <pre><code>def push(\n    topic: str,\n    title: str,\n    message: typing.Optional[str] = None,\n    priority: Priority = Priority.DEFAULT,\n    tags: typing.Union[str, typing.Iterable[str]] = [],\n    click: typing.Optional[str] = None,\n    email: typing.Optional[str] = None,\n    filepath: typing.Optional[Path] = None,\n    attach: typing.Optional[str] = None,\n    icon: typing.Optional[str] = None,\n    actions: typing.Union[Action, typing.Sequence[Action]] = [],\n    at: typing.Optional[str] = None,\n    url: typing.Optional[str] = \"https://ntfy.sh\",\n    dry_run: DryRun = DryRun.off,\n) -&gt; None:\n    \"\"\"\n    Pushes a notification.\n\n    ```python\n    # basic usage\n    import ntfy_lite as ntfy\n\n    ntfy.push(\n        \"my topic\", priority=ntfy.Priority.DEFAULT, message=\"my message\"\n    )\n    ```\n\n    For more documentation of all arguments, visit:\n    [https://ntfy.sh/docs/publish/](https://ntfy.sh/docs/publish/)\n\n    Args:\n      topic: the ntfy topic on which to publish\n      title: the title of the notification\n      message: the message. It is optional and if None, then a filepath argument must be provided instead.\n      priority: the priority of the notification\n      tags (i.e. emojis): either a string (a single tag) or a list of string (several tags). see [supported emojis](https://docs.ntfy.sh)\n      click: URL link to be included in the notification\n      email: address to which the notification should also be sent\n      filepath: path to the file to be sent as attachement.\n        It is optional and if None, then a message argument must be provided instead.\n      icon: URL to an icon to include in the notification\n      actions: An action is either a [ntfy_lite.actions.ViewAction][]\n        (i.e. a link to a website) or a [ntfy_lite.actions.HttpAction][]\n        (i.e. sending of a HTTP GET, POST or PUT request to a website)\n      at: to be used for delayed notification, see [scheduled delivery](https://ntfy.sh/docs/publish/#scheduled-delivery)\n      url: ntfy server\n      dry_run: for testing purposes, see [ntfy_lite.ntfy.DryRun][]\n    \"\"\"\n\n    # the message manager:\n    # - checks that either message or filepath is not None\n    # - if filepath is not None, data is a file to the path\n    # - else data is the UTF-8 conversion of message\n    # This context manager makes sure that data get closed\n    # (if a file)\n    with _DataManager(message, filepath) as data:\n        # checking that arguments that are expected to be\n        # urls are urls\n        urls = {\"click\": click, \"attach\": attach, \"icon\": icon}\n        for attr, value in urls.items():\n            # throw value error if not None\n            # and not a url\n            validate_url(attr, value)\n\n        # some argument can be directly set in the\n        # headers dict\n        direct_mapping: typing.Dict[str, typing.Any] = {\n            \"Title\": title,\n            \"At\": at,\n            \"Click\": click,\n            \"Email\": email,\n            \"Icon\": icon,\n        }\n        headers = {key: value for key, value in direct_mapping.items() if value}\n\n        # adding priority\n        headers[\"Priority\"] = priority.value\n\n        # adding tags\n        if tags:\n            if isinstance(tags, str):\n                tags = (tags,)\n            headers[\"Tags\"] = \",\".join([str(t) for t in tags])\n\n        # adding actions\n        if actions:\n            if isinstance(actions, Action):\n                actions = [actions]\n            headers[\"Actions\"] = \"; \".join([str(action) for action in actions])\n\n        # sending\n        if dry_run == DryRun.off:\n            response = requests.put(f\"{url}/{topic}\", data=data, headers=headers)\n            if not response.ok:\n                raise NtfyError(response.status_code, response.reason)\n        elif dry_run == DryRun.error:\n            raise NtfyError(-1, \"DryRun.error passed as argument\")\n</code></pre>"},{"location":"references/#ntfy_lite.ntfy2logging","title":"<code>ntfy2logging</code>","text":"<p>Module defining:</p> <ul> <li>LoggingLevel: typing union of all logging levels</li> <li>Priority: enumeration over ntfy priority levels</li> <li>level2priority: default mapping between logging levels and ntfy priority levels</li> </ul>"},{"location":"references/#ntfy_lite.ntfy2logging.LoggingLevel","title":"<code>LoggingLevel = typing.Literal[logging.DEBUG, logging.INFO, logging.NOTSET, logging.WARNING, logging.ERROR, logging.CRITICAL]</code>  <code>module-attribute</code>","text":"<p>Union of all logging levels (DEBUG, INFO, NOTSET, WARNING, ERROR and CRITICAL)</p>"},{"location":"references/#ntfy_lite.ntfy2logging.level2priority","title":"<code>level2priority: typing.Dict[LoggingLevel, Priority] = {logging.CRITICAL: Priority.MAX, logging.ERROR: Priority.HIGH, logging.WARNING: Priority.HIGH, logging.INFO: Priority.DEFAULT, logging.DEBUG: Priority.LOW, logging.NOTSET: Priority.MIN}</code>  <code>module-attribute</code>","text":"<p>Default mapping from logging level to ntfy priority level (e.g. a record of level INFO maps to a notification of piority level 3)</p>"},{"location":"references/#ntfy_lite.ntfy2logging.Priority","title":"<code>Priority</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of supported ntfy priority levels</p> Source code in <code>ntfy_lite/ntfy2logging.py</code> <pre><code>class Priority(Enum):\n    \"\"\"\n    Enumeration of supported ntfy priority levels\n    \"\"\"\n\n    MAX = \"5\"\n    \"\"\"MAX\"\"\"\n\n    HIGH = \"4\"\n    \"\"\"HIGH\"\"\"\n\n    DEFAULT = \"3\"\n    \"\"\"DEFAULT\"\"\"\n\n    LOW = \"2\"\n    \"\"\"LOW\"\"\"\n\n    MIN = \"1\"\n    \"\"\"MIN\"\"\"\n</code></pre>"},{"location":"references/#ntfy_lite.ntfy2logging.Priority.DEFAULT","title":"<code>DEFAULT = '3'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>DEFAULT</p>"},{"location":"references/#ntfy_lite.ntfy2logging.Priority.HIGH","title":"<code>HIGH = '4'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HIGH</p>"},{"location":"references/#ntfy_lite.ntfy2logging.Priority.LOW","title":"<code>LOW = '2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>LOW</p>"},{"location":"references/#ntfy_lite.ntfy2logging.Priority.MAX","title":"<code>MAX = '5'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>MAX</p>"},{"location":"references/#ntfy_lite.ntfy2logging.Priority.MIN","title":"<code>MIN = '1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>MIN</p>"},{"location":"references/#ntfy_lite.utils","title":"<code>utils</code>","text":"<p>Module defining the function 'validate_url'.</p>"},{"location":"references/#ntfy_lite.utils.validate_url","title":"<code>validate_url(attribute, value)</code>","text":"<p>Return None if value is a valid URL or is None, raises a ValueError otherwise.</p> <p>Parameters:</p> Name Type Description Default <code>attribute</code> <code>str</code> <p>an arbitrary string, used in the message of the raised ValueError</p> required <code>value</code> <code>Optional[str]</code> <p>the string to check</p> required Source code in <code>ntfy_lite/utils.py</code> <pre><code>def validate_url(attribute: str, value: typing.Optional[str]) -&gt; None:\n    \"\"\"\n    Return None if value is a valid URL or is None,\n    raises a ValueError otherwise.\n\n    Args:\n      attribute: an arbitrary string, used in the message of the\n        raised ValueError\n      value: the string to check\n    \"\"\"\n    if value is None:\n        return\n    if validators.url(value) is not True:\n        raise ValueError(f\"the value for {attribute} ({value}) is not an url\")\n    return\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>You may run these examples by running after installation:</p> <ul> <li>ntfy_lite_push_demo</li> <li>ntfy_lite_logging_demo</li> </ul>"},{"location":"usage/#pushing-notifications","title":"pushing notifications","text":"<pre><code>\"\"\" ntfy lite: notification push examples \"\"\"\n\nimport tempfile\nfrom pathlib import Path\nimport ntfy_lite as ntfy\n\ntopic = \"ntfy_lite_demo\"  # or something else\nemail = None  # write your email here if you wish\n\n\ndef run():\n    # note: icon does not seem to work, but that does not seem to be an issue with ntfy_lite\n    #       as the icon example from the ntfy documentation also do not work\n\n    # basic usage, most arguments are optional\n    # priority possibles values: MAX, HIGH, DEFAULT, LOW, MIN\n    print(f\"pushing a message to https://ntfy.sh/{topic}\")\n    ntfy.push(\n        topic,\n        \"ntfy_lite demo 1 - basic usage\",\n        priority=ntfy.Priority.DEFAULT,\n        message=\"this is a demo from ntfy_lite\",\n        tags=[\"butterfly\", \"cat\"],\n        icon=\"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\",\n        actions=[\n            ntfy.ViewAction(\n                label=\"open ntfy.sh website\", url=\"https://ntfy.sh\", clear=False\n            ),\n            ntfy.ViewAction(\n                label=\"open ntfy_lite github\",\n                url=\"https://github.com/MPI-IS/ntfy_lite\",\n                clear=False,\n            ),\n        ],\n        email=email,\n    )\n\n    # sending an attachment instead of a message\n    print(f\"pushing the content of a file to https://ntfy.sh/{topic}\")\n    with tempfile.TemporaryDirectory() as tmp:\n        filepath = Path(tmp) / \"ntfy_lite_demo.txt\"\n        with open(filepath, \"w\") as f:\n            f.write(\"content of ntfy_lite_demo.txt\")\n\n        # note: you can not specify both a message and a\n        #       filepath\n        ntfy.push(\n            topic,\n            \"ntfy_lite demo 2 - file attachment\",\n            filepath=filepath,\n            tags=\"file_folder\",\n            email=email,\n        )\n\n    # delayed notificiation / scheduled delivery\n    print(f\"pushing a delayed message to https://ntfy.sh/{topic} (one minute delay)\")\n    ntfy.push(\n        topic,\n        \"ntfy_lite demo 2 - delayed notification\",\n        message=\"one minute delayed notification\",\n        at=\"1m\",  # see: https://ntfy.sh/docs/publish/#scheduled-delivery\n        tags=\"hourglass\",\n        email=email,\n    )\n</code></pre>"},{"location":"usage/#logging-handler","title":"logging handler","text":"<pre><code>\"\"\" ntfy lite: ntfy logging Handler example \"\"\"\n\nimport time\nimport typing\nimport logging\nimport tempfile\nimport ntfy_lite as ntfy\nfrom pathlib import Path\n\nlogger = logging.getLogger(\"ntfy_lite\")\n\ntopic = \"ntfy_lite_demo\"  # or something else\nemail = None  # write your email here if you wish\n\n\ndef _error_callback(e: Exception):\n    \"\"\"\n    Will be called if the system fails to send ntfy notification,\n    for any reason.\n    \"\"\"\n    print(f\"failed to send ntfy notification: {e}\")\n\n\ndef _configure_log(logfile: Path) -&gt; None:\n    \"\"\"\n    Configure logging: logs will be printed in the terminal,\n    printed to logfile, and sent as ntfy notification.\n    \"\"\"\n\n    # configuration for the ntfy handler #\n\n    # tags associated to the logging level\n    level2tags = {\n        logging.ERROR: (\"broken_heart\", \"ant\"),\n        logging.INFO: (\"left_speech_bubble\",),\n        logging.DEBUG: (\"hammer_and_wrench\",),\n    }\n\n    # mapping from logging level to ntfy priority\n    level2priority = {\n        logging.CRITICAL: ntfy.Priority.MAX,\n        logging.ERROR: ntfy.Priority.HIGH,\n        logging.WARNING: ntfy.Priority.HIGH,\n        logging.INFO: ntfy.Priority.DEFAULT,\n        logging.DEBUG: ntfy.Priority.LOW,\n        logging.NOTSET: ntfy.Priority.MIN,\n    }\n\n    # sending email on errors\n    level2email: typing.Dict[ntfy.LoggingLevel, str]\n    if email is not None:\n        level2email = {logging.ERROR: email}\n    else:\n        level2email = {}\n\n    # when error: sending the content of the log file\n    level2filepath = {logging.ERROR: logfile}\n\n    # the handler that will send ntfy notifications\n    # note: most arguments are optionals and default\n    #       to reasonable values\n    ntfy_handler = ntfy.NtfyHandler(\n        topic,\n        error_callback=_error_callback,\n        level2tags=level2tags,\n        level2priority=level2priority,\n        level2filepath=level2filepath,\n        level2email=level2email,\n    )\n\n    # other handlers #\n\n    # printing to terminal\n    stream_handler = logging.StreamHandler()\n\n    # printing to file\n    file_handler = logging.FileHandler(logfile)\n\n    # setting up logs #\n\n    handlers: typing.Optional[typing.Iterable[logging.Handler]]\n    handlers = [stream_handler, file_handler, ntfy_handler]\n\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\"[%(levelname)s] %(asctime)s | %(name)s |  %(message)s\",\n        datefmt=\"%d-%b-%y %H:%M:%S\",\n        handlers=handlers,\n    )\n\n\ndef _do(error: bool, iteration: int) -&gt; None:\n    \"\"\"\n    Dummy function that prints to debug, and\n    to info (if not error) or to error (otherwise).\n    \"\"\"\n\n    logger.debug(f\"doing iteration {iteration}\")\n    if not error:\n        logger.info(f\"did iteration {iteration}\")\n    else:\n        logger.error(f\"failed to do iteration {iteration}\")\n\n\ndef _run(logfile=Path) -&gt; None:\n    \"\"\"\n    Calls the dummy function '_do' every 2 seconds for 20 seconds,\n    setting errors to be logged every 4 seconds\n    \"\"\"\n\n    logger = logging.getLogger(\"run function\")\n    logger.info(f\"running for 20 seconds, visit: https://ntfy.sh/{topic}\")\n\n    # running for 10 seconds\n    iteration = 1\n    count = 0\n    start = time.time()\n    error = False\n    while time.time() - start &lt; 20:\n        _do(error, iteration)\n        iteration += 1\n        count += 1\n        if error:\n            error = False\n        elif count &gt;= 4:\n            error = True\n            count = 0\n        time.sleep(2)\n\n    logger.info(\"exit\")\n\n\ndef run() -&gt; None:\n    print(f\"logging to htts://ntfy.sh/{topic}\")\n\n    with tempfile.TemporaryDirectory() as tmp:\n        logfile = Path(tmp) / \"ntfy_lite_demo_handler.txt\"\n\n        # setting up the logs\n        _configure_log(logfile)\n\n        # running for 20 seconds\n        try:\n            _run(logfile)\n        except Exception as e:\n            print(f\"failed with error: {e}\")\n</code></pre>"}]}